// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: protos/dummy/v1/service_dummy.proto

import type { ByteSource, MapMessage, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_49 } from "twirpscript";

import { HealthRequest, HealthResponse } from "../../common/v1/health.pb";

//========================================//
//      DummyService Protobuf Client      //
//========================================//

/**
 *
 * The primary usage of this endpoint is for the Kubernetes probes
 * (readinessProbe, liveProbe, startupProbe) and responds without
 * any authentication or authorization
 */
export async function Health(
  healthRequest: HealthRequest,
  config?: ClientConfiguration
): Promise<HealthResponse> {
  const response = await PBrequest(
    "/protos.dummy.v1.DummyService/Health",
    HealthRequest.encode(healthRequest),
    config
  );
  return HealthResponse.decode(response);
}

export async function Log(
  logRequest: LogRequest,
  config?: ClientConfiguration
): Promise<LogResponse> {
  const response = await PBrequest(
    "/protos.dummy.v1.DummyService/Log",
    LogRequest.encode(logRequest),
    config
  );
  return LogResponse.decode(response);
}

//========================================//
//        DummyService JSON Client        //
//========================================//

/**
 *
 * The primary usage of this endpoint is for the Kubernetes probes
 * (readinessProbe, liveProbe, startupProbe) and responds without
 * any authentication or authorization
 */
export async function HealthJSON(
  healthRequest: HealthRequest,
  config?: ClientConfiguration
): Promise<HealthResponse> {
  const response = await JSONrequest<HealthResponse>(
    "/protos.dummy.v1.DummyService/Health",
    healthRequest,
    config
  );
  return response;
}

export async function LogJSON(
  logRequest: LogRequest,
  config?: ClientConfiguration
): Promise<LogResponse> {
  const response = await JSONrequest<LogResponse>(
    "/protos.dummy.v1.DummyService/Log",
    logRequest,
    config
  );
  return response;
}

//========================================//
//              DummyService              //
//========================================//

export interface DummyService<Context = unknown> {
  /**
   *
   * The primary usage of this endpoint is for the Kubernetes probes
   * (readinessProbe, liveProbe, startupProbe) and responds without
   * any authentication or authorization
   */
  Health: (
    healthRequest: HealthRequest,
    context: Context
  ) => Promise<HealthResponse> | HealthResponse;
  Log: (
    logRequest: LogRequest,
    context: Context
  ) => Promise<LogResponse> | LogResponse;
}

export function createDummyService<Context>(service: DummyService<Context>) {
  return {
    name: "protos.dummy.v1.DummyService",
    methods: {
      Health: {
        name: "Health",
        handler: service.Health,
        input: HealthRequest,
        output: HealthResponse,
      },
      Log: {
        name: "Log",
        handler: service.Log,
        input: LogRequest,
        output: LogResponse,
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface LogRequest {
  name: string;
  level: LogRequest.LogLevel;
}

declare namespace LogRequest {
  export type LogLevel =
    | "LOG_LEVEL_UNSPECIFIED"
    | "LOG_LEVEL_DEBUG"
    | "LOG_LEVEL_INFO"
    | "LOG_LEVEL_WARN"
    | "LOG_LEVEL_ERROR"
    | "LOG_LEVEL_FATAL"
    | "LOG_LEVEL_PANIC"
    | "LOG_LEVEL_NO"
    | "LOG_LEVEL_DIS"
    | "LOG_LEVEL_TRACE";
}

export interface LogResponse {
  response: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const LogRequest = {
  /**
   * Serializes a LogRequest to protobuf.
   */
  encode: function (msg: Partial<LogRequest>): Uint8Array {
    return LogRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a LogRequest from protobuf.
   */
  decode: function (bytes: ByteSource): LogRequest {
    return LogRequest._readMessage(
      LogRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a LogRequest to JSON.
   */
  encodeJSON: function (msg: Partial<LogRequest>): string {
    return JSON.stringify(LogRequest._writeMessageJSON(msg));
  },

  /**
   * Deserializes a LogRequest from JSON.
   */
  decodeJSON: function (json: string): LogRequest {
    return LogRequest._readMessageJSON(
      LogRequest.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a LogRequest with all fields set to their default value.
   */
  initialize: function (): LogRequest {
    return {
      name: "",
      level: LogRequest.LogLevelFromInt(0),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LogRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.level && LogRequest.LogLevelToInt(msg.level)) {
      writer.writeEnum(2, LogRequest.LogLevelToInt(msg.level));
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<LogRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json.name = msg.name;
    }
    if (msg.level && LogRequest.LogLevelToInt(msg.level)) {
      json.level = msg.level;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LogRequest, reader: BinaryReader): LogRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.level = LogRequest.LogLevelFromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: LogRequest, json: any): LogRequest {
    const _name = json.name;
    if (_name) {
      msg.name = _name;
    }
    const _level = json.level;
    if (_level) {
      msg.level = _level;
    }
    return msg;
  },

  LogLevel: {
    LOG_LEVEL_UNSPECIFIED: "LOG_LEVEL_UNSPECIFIED",
    LOG_LEVEL_DEBUG: "LOG_LEVEL_DEBUG",
    LOG_LEVEL_INFO: "LOG_LEVEL_INFO",
    LOG_LEVEL_WARN: "LOG_LEVEL_WARN",
    LOG_LEVEL_ERROR: "LOG_LEVEL_ERROR",
    LOG_LEVEL_FATAL: "LOG_LEVEL_FATAL",
    LOG_LEVEL_PANIC: "LOG_LEVEL_PANIC",
    LOG_LEVEL_NO: "LOG_LEVEL_NO",
    LOG_LEVEL_DIS: "LOG_LEVEL_DIS",
    LOG_LEVEL_TRACE: "LOG_LEVEL_TRACE",
  } as const,

  LogLevelFromInt: function (i: number): LogRequest.LogLevel {
    switch (i) {
      case 0: {
        return "LOG_LEVEL_UNSPECIFIED";
      }
      case 1: {
        return "LOG_LEVEL_DEBUG";
      }
      case 2: {
        return "LOG_LEVEL_INFO";
      }
      case 3: {
        return "LOG_LEVEL_WARN";
      }
      case 4: {
        return "LOG_LEVEL_ERROR";
      }
      case 5: {
        return "LOG_LEVEL_FATAL";
      }
      case 6: {
        return "LOG_LEVEL_PANIC";
      }
      case 7: {
        return "LOG_LEVEL_NO";
      }
      case 8: {
        return "LOG_LEVEL_DIS";
      }
      case 9: {
        return "LOG_LEVEL_TRACE";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as LogRequest.LogLevel;
      }
    }
  },

  LogLevelToInt: function (i: LogRequest.LogLevel): number {
    switch (i) {
      case "LOG_LEVEL_UNSPECIFIED": {
        return 0;
      }
      case "LOG_LEVEL_DEBUG": {
        return 1;
      }
      case "LOG_LEVEL_INFO": {
        return 2;
      }
      case "LOG_LEVEL_WARN": {
        return 3;
      }
      case "LOG_LEVEL_ERROR": {
        return 4;
      }
      case "LOG_LEVEL_FATAL": {
        return 5;
      }
      case "LOG_LEVEL_PANIC": {
        return 6;
      }
      case "LOG_LEVEL_NO": {
        return 7;
      }
      case "LOG_LEVEL_DIS": {
        return 8;
      }
      case "LOG_LEVEL_TRACE": {
        return 9;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
};

export const LogResponse = {
  /**
   * Serializes a LogResponse to protobuf.
   */
  encode: function (msg: Partial<LogResponse>): Uint8Array {
    return LogResponse._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a LogResponse from protobuf.
   */
  decode: function (bytes: ByteSource): LogResponse {
    return LogResponse._readMessage(
      LogResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a LogResponse to JSON.
   */
  encodeJSON: function (msg: Partial<LogResponse>): string {
    return JSON.stringify(LogResponse._writeMessageJSON(msg));
  },

  /**
   * Deserializes a LogResponse from JSON.
   */
  decodeJSON: function (json: string): LogResponse {
    return LogResponse._readMessageJSON(
      LogResponse.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a LogResponse with all fields set to their default value.
   */
  initialize: function (): LogResponse {
    return {
      response: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LogResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.response) {
      writer.writeString(1, msg.response);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<LogResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.response) {
      json.response = msg.response;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LogResponse, reader: BinaryReader): LogResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.response = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: LogResponse, json: any): LogResponse {
    const _response = json.response;
    if (_response) {
      msg.response = _response;
    }
    return msg;
  },
};
