// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: protos/common/v1/health.proto


import type {
    ByteSource,

    } from 'twirpscript';
import {
  BinaryReader,
BinaryWriter,

  } from 'twirpscript';
  







  //========================================//
  //                 Types                  //
  //========================================//
  
  
export type HealthStatus = typeof HealthStatus[keyof typeof HealthStatus];

export interface HealthRequest {
}

    /**
     *
 * HealthResponse Message
 *
 * This message is only used to respond to Health Service.
 * This message return an enumerator of Status onf app
     */
      export interface HealthResponse {
    /**
     * Status represents the current status of the application
     */
      status: HealthStatus;
}


  //========================================//
  //        Protobuf Encode / Decode        //
  //========================================//
  
  
export const HealthStatus = {HEALTH_STATUS_UNSPECIFIED: 0,
    /**
     * The application run normally and successfully
     */
      HEALTH_STATUS_SERVING: 1,
    /**
     * An error is occurred recently and can produce more errors. One or more components in the stack might become overloaded soon.
     */
      HEALTH_STATUS_WARNING: 2,
    /**
     * A partial anomaly of full outage of service. Non-security patches might be available.
     */
      HEALTH_STATUS_DEGRADED: 3,
    /**
     * One or more components in the stack might be in an unusable status and the stack might become unresponsive soon. Security patches might be available.
     */
      HEALTH_STATUS_CRITICAL: 4,
} as const;

export const HealthRequest = {        /**
         * Serializes a HealthRequest to protobuf.
         */
        
        encode: function(_healthRequest?: Partial<HealthRequest>): Uint8Array {
            return new Uint8Array();
        },

        /**
         * Deserializes a HealthRequest from protobuf.
         */
        
        decode: function(_bytes?: ByteSource): HealthRequest {
            return {};
        },

        /**
         * Serializes a HealthRequest to JSON.
         */
        
        encodeJSON: function(_healthRequest?: Partial<HealthRequest>): string {
            return "{}";
        },

        /**
         * Deserializes a HealthRequest from JSON.
         */
        
        decodeJSON: function(_json?: string): HealthRequest {
            return {};
        },

        /**
         * Initializes a HealthRequest with all fields set to their default value.
         */
        initialize: function(): HealthRequest {
          return {
            
          };
        },

        

        
        
        

        

      };

export const HealthResponse = {        /**
         * Serializes a HealthResponse to protobuf.
         */
        encode: function(healthResponse: Partial<HealthResponse>): Uint8Array {
          return HealthResponse._writeMessage(healthResponse, new BinaryWriter()).getResultBuffer();
        },
        

        /**
         * Deserializes a HealthResponse from protobuf.
         */
        decode: function(bytes: ByteSource): HealthResponse {
          return HealthResponse._readMessage(HealthResponse.initialize(), new BinaryReader(bytes));
        },
        

        /**
         * Serializes a HealthResponse to JSON.
         */
        encodeJSON: function(healthResponse: Partial<HealthResponse>): string {
          return JSON.stringify(HealthResponse._writeMessageJSON(healthResponse));
        },
        

        /**
         * Deserializes a HealthResponse from JSON.
         */
        decodeJSON: function(json: string): HealthResponse {
          return HealthResponse._readMessageJSON(HealthResponse.initialize(), JSON.parse(json));
        },
        

        /**
         * Initializes a HealthResponse with all fields set to their default value.
         */
        initialize: function(): HealthResponse {
          return {
            status: 0,
          };
        },

        /**
         * @private
         */
        _writeMessage: function(msg : Partial<HealthResponse>, writer: BinaryWriter): BinaryWriter {
          if (msg.status) {writer.writeEnum(1, msg.status);}
            return writer;
        },

        /**
         * @private
         */
        _writeMessageJSON: function(msg : Partial<HealthResponse>): Record<string, unknown> {
          const json: Record<string, unknown> = {};
          if (msg.status) {json.status = msg.status;}
          return json;
        },
        
        /**
         * @private
         */
        _readMessage: function(msg: HealthResponse, reader: BinaryReader): HealthResponse {
          while (reader.nextField()) {
            const field = reader.getFieldNumber();
            switch (field) {
              case 1: {msg.status = reader.readEnum() as HealthStatus;break;
}
              default: {
                reader.skipField();
                break;
              }
            }
          }
          return msg;
        },

        /**
         * @private
         */
        _readMessageJSON: function(msg: HealthResponse, json: any): HealthResponse {
          const status = json.status ?? json.status;if (status) {msg.status = status;}
          return msg;
        },

      };


