// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/api/field_behavior.proto

import type { ByteSource, MapMessage } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * An indicator of the behavior of a given field (for example, that a field
 * is required in requests, or given as output but ignored as input).
 * This **does not** change the behavior in protocol buffers itself; it only
 * denotes the behavior and may affect how API tooling handles the field.
 *
 * Note: This enum **may** receive new values in the future.
 */
export type FieldBehavior =
  | "FIELD_BEHAVIOR_UNSPECIFIED"
  | "OPTIONAL"
  | "REQUIRED"
  | "OUTPUT_ONLY"
  | "INPUT_ONLY"
  | "IMMUTABLE"
  | "UNORDERED_LIST";

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const FieldBehavior = {
  /**
   * Conventional default for enums. Do not use this.
   */
  FIELD_BEHAVIOR_UNSPECIFIED: "FIELD_BEHAVIOR_UNSPECIFIED",
  /**
   * Specifically denotes a field as optional.
   * While all fields in protocol buffers are optional, this may be specified
   * for emphasis if appropriate.
   */
  OPTIONAL: "OPTIONAL",
  /**
   * Denotes a field as required.
   * This indicates that the field **must** be provided as part of the request,
   * and failure to do so will cause an error (usually `INVALID_ARGUMENT`).
   */
  REQUIRED: "REQUIRED",
  /**
   * Denotes a field as output only.
   * This indicates that the field is provided in responses, but including the
   * field in a request does nothing (the server *must* ignore it and
   * *must not* throw an error as a result of the field's presence).
   */
  OUTPUT_ONLY: "OUTPUT_ONLY",
  /**
   * Denotes a field as input only.
   * This indicates that the field is provided in requests, and the
   * corresponding field is not included in output.
   */
  INPUT_ONLY: "INPUT_ONLY",
  /**
   * Denotes a field as immutable.
   * This indicates that the field may be set once in a request to create a
   * resource, but may not be changed thereafter.
   */
  IMMUTABLE: "IMMUTABLE",
  /**
   * Denotes that a (repeated) field is an unordered list.
   * This indicates that the service may provide the elements of the list
   * in any arbitrary  order, rather than the order the user originally
   * provided. Additionally, the list's order may or may not be stable.
   */
  UNORDERED_LIST: "UNORDERED_LIST",
} as const;

const FieldBehaviorFromInt = function (i: number): FieldBehavior {
  switch (i) {
    case 0: {
      return "FIELD_BEHAVIOR_UNSPECIFIED";
    }
    case 1: {
      return "OPTIONAL";
    }
    case 2: {
      return "REQUIRED";
    }
    case 3: {
      return "OUTPUT_ONLY";
    }
    case 4: {
      return "INPUT_ONLY";
    }
    case 5: {
      return "IMMUTABLE";
    }
    case 6: {
      return "UNORDERED_LIST";
    }
    // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
    default: {
      return i as unknown as FieldBehavior;
    }
  }
};

const FieldBehaviorToInt = function (i: FieldBehavior): number {
  switch (i) {
    case "FIELD_BEHAVIOR_UNSPECIFIED": {
      return 0;
    }
    case "OPTIONAL": {
      return 1;
    }
    case "REQUIRED": {
      return 2;
    }
    case "OUTPUT_ONLY": {
      return 3;
    }
    case "INPUT_ONLY": {
      return 4;
    }
    case "IMMUTABLE": {
      return 5;
    }
    case "UNORDERED_LIST": {
      return 6;
    }
    // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
    default: {
      return i as unknown as number;
    }
  }
};
